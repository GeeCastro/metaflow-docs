"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2872],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),o=n(6010),s=n(2389),i=n(7392),l=n(7094),u=n(2466);const p="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:n,block:s,defaultValue:m,values:d,groupId:h,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[N,C]=(0,r.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==N&&b.some((t=>t.value===e))&&C(e)}const O=e=>{const t=e.currentTarget,n=x.indexOf(t),a=b[n].value;a!==N&&(T(t),C(a),null!=h&&w(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},f)},b.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:E,onFocus:O,onClick:O},s,{className:(0,o.Z)("tabs__item",c,null==s?void 0:s.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,r.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,s.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(5488),s=n(5162);const i={},l="Requesting Compute Resources",u={unversionedId:"scaling/remote-tasks/requesting-resources",id:"scaling/remote-tasks/requesting-resources",title:"Requesting Compute Resources",description:"You can run any Metaflow flow in the cloud simply by adding an option on the command line:",source:"@site/docs/scaling/remote-tasks/requesting-resources.md",sourceDirName:"scaling/remote-tasks",slug:"/scaling/remote-tasks/requesting-resources",permalink:"/scaling/remote-tasks/requesting-resources",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/remote-tasks/requesting-resources.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Computing at Scale",permalink:"/scaling/remote-tasks/introduction"},next:{title:"Using Multiple CPU Cores",permalink:"/scaling/remote-tasks/multicore"}},p={},c=[{value:"Example",id:"example",level:2},{value:"Running only specific steps remotely",id:"running-only-specific-steps-remotely",level:3}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"requesting-compute-resources"},"Requesting Compute Resources"),(0,r.kt)("p",null,"You can run any Metaflow flow in the cloud simply by adding an option on the command line:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"k8s",label:"Kubernetes",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-batch"},"$ python hello.py run --with kubernetes\n"))),(0,r.kt)(s.Z,{value:"batch",label:"AWS Batch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-k8s"},"$ python hello.py run --with batch\n")))),(0,r.kt)("p",null,"When you add ",(0,r.kt)("inlineCode",{parentName:"p"},"--with kubernetes")," (for Kubernetes) or ",(0,r.kt)("inlineCode",{parentName:"p"},"--with batch")," (for AWS Batch) on the\ncommand line (",(0,r.kt)("a",{parentName:"p",href:"/getting-started/infrastructure"},"depending on your deployment"),"), Metaflow\nruns the flow on the chosen compute backend."),(0,r.kt)("p",null,"Every step gets allocated a modest amount of resources by default - around 1 CPU core and 4GB of\nRAM. If your step needs more CPU cores, memory, disk, or ",(0,r.kt)("a",{parentName:"p",href:"gpu-compute"},"more GPUs (or other hardware\naccelerators)"),", annotate your resource requirements with the\n",(0,r.kt)("a",{parentName:"p",href:"/api/step-decorators/resources"},(0,r.kt)("inlineCode",{parentName:"a"},"@resources"))," decorator."),(0,r.kt)("p",null,"Another benefit of ",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," is that it allows you to move smoothly between local\ndevelopment and the cloud. The decorator doesn't have an effect for local runs, but when\ncombined with ",(0,r.kt)("inlineCode",{parentName:"p"},"--with kubernetes")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--with batch"),", you can use the flow to handle bigger\nmodels or more data without changing anything in the code. Note that\n",(0,r.kt)("a",{parentName:"p",href:"/production/introduction"},"production deployments")," always run in the cloud, respecting\n",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," requirements."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"@kubernetes")," can target any Kubernetes cluster, including on-premise clusters.\nFor brevity, we use the term ",(0,r.kt)("em",{parentName:"p"},"the cloud")," to refer to all compute backends.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Consider the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowSpec, step, resources\n\nclass BigSum(FlowSpec):\n\n    @resources(memory=60000, cpu=1)\n    @step\n    def start(self):\n        import numpy\n        import time\n        big_matrix = numpy.random.ranf((80000, 80000))\n        t = time.time()\n        self.sum = numpy.sum(big_matrix)\n        self.took = time.time() - t\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print("The sum is %f." % self.sum)\n        print("Computing it took %dms." % (self.took * 1000))\n\nif __name__ == \'__main__\':\n    BigSum()\n')),(0,r.kt)("p",null,"This example creates a huge 80000x80000 random matrix, ",(0,r.kt)("inlineCode",{parentName:"p"},"big_matrix"),". The matrix requires\nabout 80000^2 ","*"," 8 bytes = 48GB of memory. "),(0,r.kt)("p",null,"If you attempt to run this on your local machine, it is likely that the following will\nhappen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ python BigSum.py run\n\n2019-11-29 02:43:39.689 [5/start/21975 (pid 83812)] File "BugSum.py", line 11, in start\n2018-11-29 02:43:39.689 [5/start/21975 (pid 83812)] big_matrix = numpy.random.ranf((80000, 80000))\n2018-11-29 02:43:39.689 [5/start/21975 (pid 83812)] File "mtrand.pyx", line 856, in mtrand.RandomState.random_sample\n2018-11-29 02:43:39.689 [5/start/21975 (pid 83812)] File "mtrand.pyx", line 167, in mtrand.cont0_array\n2018-11-29 02:43:39.689 [5/start/21975 (pid 83812)] MemoryError\n2018-11-29 02:43:39.689 [5/start/21975 (pid 83812)]\n2018-11-29 02:43:39.844 [5/start/21975 (pid 83812)] Task failed.\n2018-11-29 02:43:39.844 Workflow failed.\n    Step failure:\n    Step start (task-id 21975) failed.\n')),(0,r.kt)("p",null,"This fails quickly due to a ",(0,r.kt)("inlineCode",{parentName:"p"},"MemoryError")," on most laptops as we are unable to allocate\n48GB of memory. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," decorator suggests resource requirements for a step. The ",(0,r.kt)("inlineCode",{parentName:"p"},"memory"),"\nargument specifies the amount of RAM in megabytes and ",(0,r.kt)("inlineCode",{parentName:"p"},"cpu")," the number of CPU cores\nrequested. It does not produce the resources magically, which is why the run above\nfailed. The ",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," decorator takes effect only when combined with another\ndecorator that describes what compute platform, like Kubernetes or AWS Batch, to use."),(0,r.kt)("p",null,"Let's use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--with")," option to attach a desired decorator to all steps on the command\nline. Choose one of the commands in the tabs below corresponding to whichever you use-\nKubernetes or AWS Batch. This assumes that you have ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/infrastructure"},"configured one of these systems\nwork with Metaflow"),"."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"k8s",label:"Kubernetes",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-batch"},"$ python BigSum.py run --with kubernetes\n"))),(0,r.kt)(s.Z,{value:"batch",label:"AWS Batch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-k8s"},"$ python BigSum.py run --with batch\n")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--with batch")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--with kubernetes")," option instructs Metaflow to run all tasks as\nseparate jobs on the chosen compute platform, instead of using a local process for each\ntask. It has the same effect as adding the decorator above all steps in the source code."),(0,r.kt)("p",null,"This time the run should succeed thanks to the large enough instance, assuming a large\nenough instance is available in your compute environment. In this case the ",(0,r.kt)("inlineCode",{parentName:"p"},"resources"),"\ndecorator is used as a prescription for the size of the instance that the job should run\non. Make sure that this resource requirement can be met. If a large enough instance is\nnot available, the task won't start executing."),(0,r.kt)("p",null,"You should see an output like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"The sum is 3200003911.795288.\nComputing it took 4497ms.\n")),(0,r.kt)("p",null,"In addition to ",(0,r.kt)("inlineCode",{parentName:"p"},"cpu")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"memory")," you can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"gpu=N")," to request N GPUs for the\ninstance."),(0,r.kt)("h3",{id:"running-only-specific-steps-remotely"},"Running only specific steps remotely"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," decorator is an annotation that signals how much resources are required\nby a step. By itself, it does not force the step to be executed on any particular\nplatform. This is convenient as you can make the choice later, executing the same flow\non different environments without changes."),(0,r.kt)("p",null,"Sometimes it is useful to make sure that a step always executes on a certain compute\nplatform, maybe using a platform-specific configuration. You can achieve this by adding\neither ",(0,r.kt)("inlineCode",{parentName:"p"},"@batch")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@kubernetes")," above steps that should be executed remotely. The\ndecorators accept the same keyword arguments as ",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," as well as\nplatform-specific arguments that you can find listed in ",(0,r.kt)("a",{parentName:"p",href:"/api/step-decorators"},"the API\nreference"),"."),(0,r.kt)("p",null,"For instance, in the example above, replace ",(0,r.kt)("inlineCode",{parentName:"p"},"@resources")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"@batch")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@kubernetes"),"\nand run it as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ python BigSum.py run\n")),(0,r.kt)("p",null,"You will see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," step gets executed on a remote instance but the ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),"\nstep, which does not need special resources, is executed locally. You could even mix\ndecorators so that some steps execute on ",(0,r.kt)("inlineCode",{parentName:"p"},"@kubernetes"),", some on ",(0,r.kt)("inlineCode",{parentName:"p"},"@batch"),", and some\nlocally."))}d.isMDXComponent=!0}}]);