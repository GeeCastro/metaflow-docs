"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4571],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5067:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={},i="Inspecting Flows and Results",o={unversionedId:"v/r/metaflow/client",id:"v/r/metaflow/client",title:"Inspecting Flows and Results",description:"Metaflow provides a client API that is used to inspect results of past runs. It is particularly well suited to being used in notebooks.",source:"@site/docs/v/r/metaflow/client.md",sourceDirName:"v/r/metaflow",slug:"/v/r/metaflow/client",permalink:"/v/r/metaflow/client",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/v/r/metaflow/client.md",tags:[],version:"current",frontMatter:{},sidebar:"r",previous:{title:"Basics of Metaflow",permalink:"/v/r/metaflow/basics"},next:{title:"Debugging with Metaflow",permalink:"/v/r/metaflow/debugging"}},s={},c=[{value:"Object hierarchy",id:"object-hierarchy",level:2},{value:"Navigating the object hierarchy",id:"navigating-the-object-hierarchy",level:2},{value:"Listing children",id:"listing-children",level:3},{value:"Accessing a specific child",id:"accessing-a-specific-child",level:3},{value:"Accessing data",id:"accessing-data",level:3},{value:"Properties of Flow/Run/Step/Task Objects",id:"properties-of-flowrunsteptask-objects",level:3},{value:"Metadata provider",id:"metadata-provider",level:2}],p={toc:c};function u(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inspecting-flows-and-results"},"Inspecting Flows and Results"),(0,r.kt)("p",null,"Metaflow provides a client API that is used to inspect results of past runs. It is particularly well suited to being used in notebooks."),(0,r.kt)("p",null,"This document provides an overview of the client API."),(0,r.kt)("h2",{id:"object-hierarchy"},"Object hierarchy"),(0,r.kt)("p",null,"Note that all operations in the Client API are filtered by the current namespace, as explained in ",(0,r.kt)("a",{parentName:"p",href:"tagging"},"Organizing Results"),". If you do not get the results you expect, make sure you are in the correct namespace. The Client API consults the metadata service to gather results, so make sure that the client is properly configured to use the correct ",(0,r.kt)("a",{parentName:"p",href:"client#metadata-provider"},"metadata provider"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(9792).Z,width:"639",height:"370"})),(0,r.kt)("p",null,"These objects can be instantiated simply with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'# Flow object\nflow <- flow_client$new("HelloWorldFlow")\n\n# Run object\nrun <- run_client$new(flow, run_id)\n# run_id is 12\nrun <- run_client$new("HelloWorldFlow/12")\n\n# Step object\nstep <- step_client$new(run, step_name)\n# step_name is start\nstep <- step_client$new("HelloWorldFlow/12/start")\n\n# Task object\ntask <- task_client$new(step, task_id)\n# task_id is 12345678\ntask <- task_client$new("HelloWorldFlow/12/start/12345678")\n\n# Data Artifact\ntask$artifact("my_var")\n')),(0,r.kt)("h2",{id:"navigating-the-object-hierarchy"},"Navigating the object hierarchy"),(0,r.kt)("p",null,"Every object listed above follows a consistent interface. All the operations below are available in all objects, not just the ones demonstrated."),(0,r.kt)("h3",{id:"listing-children"},"Listing children"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"# list all past runs\nmetaflow::list_flows()\n\n# list all past runs of the flow object\n# shows a list of strings of run_id\nprint(flow$runs)\n\n# list all step names of the run object\n# shows a list of strings of step names\nprint(run$steps)\n\n# list all task id of the step object\n# shows a list of strings of task_id\nprint(step$tasks)\n")),(0,r.kt)("h3",{id:"accessing-a-specific-child"},"Accessing a specific child"),(0,r.kt)("p",null,"You can access a specific child simply by"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'helloflow <- flow_client$new("HelloFlow")\nrun <- helloflow$run("2")\n')),(0,r.kt)("h3",{id:"accessing-data"},"Accessing data"),(0,r.kt)("p",null,"One of the most typical use cases of the client API is to access data artifacts produced by runs. Each data artifact is represented by a ",(0,r.kt)("inlineCode",{parentName:"p"},"DataArtifact")," object whose parent is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Task"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DataArtifact")," is a container object for the actual value. Besides the value, ",(0,r.kt)("inlineCode",{parentName:"p"},"DataArtifact")," includes metadata about the artifact, such as its time of creation."),(0,r.kt)("p",null,"Often you are only interested in the value of an artifact. For this typical use case we provide a convenience property ",(0,r.kt)("inlineCode",{parentName:"p"},"$data")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," object. The ",(0,r.kt)("inlineCode",{parentName:"p"},"$data")," property returns a container which has all artifacts produced by the task as attributes."),(0,r.kt)("p",null,"For instance, this the shortest way to access a value produced by a step in a run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'task <- task_client$new("DebugFlow/2/compute/123")\nprint(task$artifact("my_var"))\n')),(0,r.kt)("p",null,"Here, we print the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"self$my_varx")," in the step ",(0,r.kt)("inlineCode",{parentName:"p"},"compute")," of the run ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", task ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," of the flow ",(0,r.kt)("inlineCode",{parentName:"p"},"DebugFlow"),"."),(0,r.kt)("h3",{id:"properties-of-flowrunsteptask-objects"},"Properties of Flow/Run/Step/Task Objects"),(0,r.kt)("p",null,"You can check the full object documentation by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"help(metaflow::flow_client)\nhelp(metaflow::run_client)\nhelp(metaflow::step_client)\nhelp(metaflow::task_client)\n")),(0,r.kt)("p",null,"Every object has the following common properties available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tags"),": tags assigned to the object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"created_at"),": creation timestamp"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"finished_at"),": finish timestamp"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent"),": parent object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pathspec"),": object fully qualified name")),(0,r.kt)("p",null,"You can find more details in the object documentation."),(0,r.kt)("h2",{id:"metadata-provider"},"Metadata provider"),(0,r.kt)("p",null,"The Client API relies on a metadata service to gather results appropriately. Metaflow supports a local mode ","(",(0,r.kt)("inlineCode",{parentName:"p"},".metaflow")," directory on your filesystem",")"," and a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-service"},"remote mode"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"# Fetch currently configured metadata provider\nmetaflow::get_metadata()\n\n# Configure Client to use local metadata provider globally\nmetaflow::set_metadata('/Users/bob/metaflow')\n\n# Configure Client to use remote metadata provider globally\nmetaflow::set_metadata('https://localhost:5000/mymetaflowservice')\n")),(0,r.kt)("p",null,"Note that changing the metadata provider is a global operation and all subsequent client operations will use the metadata provider specified."))}u.isMDXComponent=!0},9792:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/hierarchy-aa136d8e279d276d816b3d826d50319c.png"}}]);