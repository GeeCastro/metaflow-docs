"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9189],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=p(n),u=r,m=f["".concat(l,".").concat(u)]||f[u]||d[u]||s;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={},i="Episode 2: Statistics",o={unversionedId:"v/r/getting-started/tutorials/season-1-the-local-experience/episode02",id:"v/r/getting-started/tutorials/season-1-the-local-experience/episode02",title:"Episode 2: Statistics",description:"Use Metaflow to load the movie metadata CSV file into a data frame and compute some movie genre-specific statistics. These statistics are then used in later examples to improve our playlist generator.",source:"@site/docs/v/r/getting-started/tutorials/season-1-the-local-experience/episode02.md",sourceDirName:"v/r/getting-started/tutorials/season-1-the-local-experience",slug:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode02",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode02",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/v/r/getting-started/tutorials/season-1-the-local-experience/episode02.md",tags:[],version:"current",frontMatter:{},sidebar:"r",previous:{title:"Episode 1: Playlist",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode01"},next:{title:"Episode 3: Playlist Redux",permalink:"/v/r/getting-started/tutorials/season-1-the-local-experience/episode03"}},l={},p=[{value:"Showcasing:",id:"showcasing",level:2},{value:"To play this episode:",id:"to-play-this-episode",level:2}],c={toc:p};function d(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"episode-2-statistics"},"Episode 2: Statistics"),(0,r.kt)("p",null,"Use Metaflow to load the movie metadata CSV file into a data frame and compute some movie genre-specific statistics. These statistics are then used in later examples to improve our playlist generator."),(0,r.kt)("p",null,"You can optionally use the Metaflow client to eyeball the results in a Markdown Notebook, and make some simple plots."),(0,r.kt)("h2",{id:"showcasing"},"Showcasing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fan-out over a set of parameters using ",(0,r.kt)("a",{parentName:"li",href:"/v/r/metaflow/basics#foreach"},"Metaflow foreach"),"."),(0,r.kt)("li",{parentName:"ul"},"Plotting results in a Markdown Notebook.")),(0,r.kt)("h2",{id:"to-play-this-episode"},"To play this episode:"),(0,r.kt)("p",null,"If you haven't yet pulled the tutorials to your current working directory, you can follow the instructions ",(0,r.kt)("a",{parentName:"p",href:"../#pull-tutorials"},"here"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cd tutorials/02-statistics")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Rscript stats.R show")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Rscript stats.R run")),(0,r.kt)("li",{parentName:"ol"},"Open ",(0,r.kt)("inlineCode",{parentName:"li"},"stats.Rmd")," in RStudio")),(0,r.kt)("p",null,"The dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"movies.csv")," is the same one as in Episode 01, which looks like this The dataset looks like this"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"movie_title"),(0,r.kt)("th",{parentName:"tr",align:"left"},"title_year"),(0,r.kt)("th",{parentName:"tr",align:"left"},"genre"),(0,r.kt)("th",{parentName:"tr",align:"left"},"gross"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Avatar"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2009"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sci-Fi"),(0,r.kt)("td",{parentName:"tr",align:"left"},"760505847")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Pirates of the Caribbean: At World's End"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2007"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fantasy"),(0,r.kt)("td",{parentName:"tr",align:"left"},"309404152")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Spectre"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2015"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Thriller"),(0,r.kt)("td",{parentName:"tr",align:"left"},"200074175")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"..."),(0,r.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(8473).Z,width:"1432",height:"344"})),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MovieStatsFlow")," below performs the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Ingests a CSV into a data frame."),(0,r.kt)("li",{parentName:"ol"},"Fan-out over genre using Metaflow foreach."),(0,r.kt)("li",{parentName:"ol"},"Compute median and mean for each genre."),(0,r.kt)("li",{parentName:"ol"},"Save a data frame of genre-specific statistics.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(metaflow)\n\n# The start step:\nstart <- function(self){\n    # Loads the movie data into a data frame\n    self$df <- read.csv("./movies.csv", stringsAsFactors=FALSE)\n\n    # find all unique genres\n    self$genres <- levels(as.factor(self$df$genre))\n}\n\n# Compute statistics for a single genre.\ncompute_stats <- function(self){\n    self$genre <- self$input\n    message("Computing statistics for ", self$genre)\n\n    # Find all the movies that have this genre\n    self$df_by_genre <- self$df[self$df$genre == self$genre, ]\n\n    gross <- self$df_by_genre$gross\n\n    # Get some statistics on the gross box office for these titles.\n    self$median <- median(gross)\n    self$mean <- mean(gross)\n}\n\n#  Join our parallel branches and merge results into a data frame.\njoin <- function(self, inputs){\n    self$stats <- data.frame(\n        "genres" = unlist(lapply(inputs, function(inp){inp$genre})),\n        "median" = unlist(lapply(inputs, function(inp){inp$median})),\n        "mean" = unlist(lapply(inputs, function(inp){inp$mean})))\n\n    print(head(self$stats))\n}\n\nmetaflow("MovieStatsFlow") %>%\n    step(step = "start",\n          r_function = start,\n          next_step = "compute_stats",\n          foreach = "genres") %>%\n    step(step = "compute_stats",\n         r_function = compute_stats,\n         next_step = "join") %>%\n    step(step = "join",\n         r_function = join,\n         next_step = "end",\n         join = TRUE) %>%\n    step(step = "end") %>%\n    run()\n')))}d.isMDXComponent=!0},8473:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tutorial-episode-2-a061d17ef87a4587f007e802338470fc.png"}}]);