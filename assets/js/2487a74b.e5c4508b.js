"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6553],{8630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),o=t(2004);const l={},r="Managing Libraries",s={unversionedId:"scaling/dependencies/libraries",id:"scaling/dependencies/libraries",title:"Managing Libraries",description:"Whereas the previous page covered [packaging of your own Python modules and",source:"@site/docs/scaling/dependencies/libraries.md",sourceDirName:"scaling/dependencies",slug:"/scaling/dependencies/libraries",permalink:"/scaling/dependencies/libraries",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/dependencies/libraries.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Structuring Projects",permalink:"/scaling/dependencies/project-structure"},next:{title:"Conda vs. PyPI",permalink:"/scaling/dependencies/conda-vs-pypi"}},p={},d=[{value:"The <code>@pypi</code> and <code>@conda</code> decorators",id:"the-pypi-and-conda-decorators",level:2},{value:"Bleeding edge versions of the decorators",id:"bleeding-edge-versions-of-the-decorators",level:3},{value:"<code>@pypi</code> in action",id:"pypi-in-action",level:2}],c={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"managing-libraries"},"Managing Libraries"),(0,i.kt)("p",null,"Whereas the previous page covered ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"packaging of your own Python modules and\npackages"),", this page covers handling\nof 3rd party dependencies that are published as installable Python packages."),(0,i.kt)("p",null,"Metaflow supports installation of external packages from two Python package\nrepositories: ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/"},"PyPI")," and ",(0,i.kt)("a",{parentName:"p",href:"https://conda-forge.org/"},"Conda"),",\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators. If you wonder why we need two\ndecorators and when to use which, see\n",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/conda-vs-pypi"},"Conda vs. PyPI"),". To learn why you\nshould use the decorators and not install packages\nmanually, see ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/internals"},"Packaging Internals"),"."),(0,i.kt)("h2",{id:"the-pypi-and-conda-decorators"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"@conda")," decorators"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators allow you to make arbitrary packages\navailable to Metaflow steps, as if you were installing them manually with\n",(0,i.kt)("inlineCode",{parentName:"p"},"pip install")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"conda install"),". This functionality works in conjuction\nwith ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"local code packaging"),", so\nsteps can execute in safely isolated, remote-execution friendly environments\nthat contain all dependencies they need."),(0,i.kt)("p",null,"Crucially, when using ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," steps can ",(0,i.kt)("strong",{parentName:"p"},"only")," access packages\nthat are explicitly included either in the code package or specified in the\ndecorator. System-wide packages are not available by design, making sure that\nall dependencies are explicitly specified and managed, ensuring\nreproducibility and stability of the flow."),(0,i.kt)("p",null,"All examples below work interchangeably with ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),". The\nexamples include both ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," lines as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," lines commented out,\nso you can easily test both the decorators. In a real-life setting, you\nwould ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/conda-vs-pypi"},"use either ",(0,i.kt)("inlineCode",{parentName:"a"},"@conda")," or ",(0,i.kt)("inlineCode",{parentName:"a"},"@pypi")),"."),(0,i.kt)("h3",{id:"bleeding-edge-versions-of-the-decorators"},"Bleeding edge versions of the decorators"),(0,i.kt)("p",null,"The default ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators provide basic functionality\nthat covers typical use cases. If you want to use more advanced features\nthat are not included in the default decorators yet, you can use\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-nflx-extensions"},"Netflix's Metaflow extensions"),".\nThese decorators are fully compatible with the built-in\n",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," but provide several additional features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Named environments which enables you easy environment saving and sharing."),(0,i.kt)("li",{parentName:"ul"},"A more full-fledged ",(0,i.kt)("inlineCode",{parentName:"li"},"environment")," command allowing you to resolve environments\nusing external ",(0,i.kt)("inlineCode",{parentName:"li"},"requirements.txt")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"environment.yml")," files as well as\ninspect and rehydrate environments used in any previously run step."),(0,i.kt)("li",{parentName:"ul"},"More extensive package support: You can mix and match Conda and Pypi packages, more\ntypes of Pypi packages, etc.)."),(0,i.kt)("li",{parentName:"ul"},"It is generally more efficient with caching and resolving and provides options\nfor faster performance.")),(0,i.kt)("p",null,"To use, simply install ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/metaflow-netflixext/"},"this package"),".\nDocumentation can be found\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-nflx-extensions/blob/main/docs/conda.md"},"here"),".\nLet us know on the ",(0,i.kt)("a",{parentName:"p",href:"http://slack.outerbounds.co"},"Metaflow community Slack")," if you\nfind these additional features useful!"),(0,i.kt)("h2",{id:"pypi-in-action"},(0,i.kt)("inlineCode",{parentName:"h2"},"@pypi")," in action"),(0,i.kt)("p",null,"This example demonstrates typical use of ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),"). Save the flow as ",(0,i.kt)("inlineCode",{parentName:"p"},"fractalflow.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, card, pypi, step, current\nfrom metaflow.cards import Image\n\nclass FractalFlow(FlowSpec):\n\n    @step\n    def start(self):\n        self.next(self.plot)\n\n    @pypi(python='3.9.13',\n          packages={'pyfracgen': '0.0.11',\n                    'matplotlib': '3.8.0'})\n    @card(type='blank')\n    @step\n    def plot(self):\n        # pylint: disable=import-error,no-member\n        import pyfracgen as pf\n        from matplotlib import pyplot as plt\n\n        string = \"AAAAAABBBBBB\"\n        xbound = (2.5, 3.4)\n        ybound = (3.4, 4.0)\n        res = pf.lyapunov(\n            string, xbound, ybound, width=4, height=3,\n            dpi=300, ninit=2000, niter=2000\n        )\n        pf.images.markus_lyapunov_image(res, plt.cm.bone, plt.cm.bone_r, gammas=(8, 1))\n        current.card.append(Image.from_matplotlib(plt.gcf()))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    FractalFlow()\n")),(0,i.kt)("p",null,"Note the following details in the flow:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use the ",(0,i.kt)("inlineCode",{parentName:"li"},"@pypi")," decorator to make two additional libraries, ",(0,i.kt)("inlineCode",{parentName:"li"},"pyfracgen")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"matplotlib"),",\nas well as their transitive dependencies available in the ",(0,i.kt)("inlineCode",{parentName:"li"},"plot")," step."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"@pypi")," decorator requires that we specify the explicit versions of packages we want\nto import. This ensures that the code executes predictably even when the packages change\nover time."),(0,i.kt)("li",{parentName:"ul"},"We specify the Python version. Some packages containing non-Python code don't work with\nall Python versions, so fixing the Python version ensures reproducibility. Your colleague\nmay use a different version than what you have installed locally."),(0,i.kt)("li",{parentName:"ul"},"We ",(0,i.kt)("inlineCode",{parentName:"li"},"import")," the packages inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"plot")," step and not at the top of the file. The packages\nare only available in this step, so importing at the top level wouldn't work."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"pylint")," checker may get confused about packages that are not installed system-wide.\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"# pylint: ")," comment addresses the false alerts.")),(0,i.kt)("p",null,"All these points apply to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorator as well."),(0,i.kt)("p",null,"Execute the flow as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python fractalflow.py --environment=pypi run\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment=pypi")," option which ensures that every step gets its own isolated environment.\nThis option is required whenever you use ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators."),(0,i.kt)("p",null,"When you execute the flow for the first time, the environments need to be resolved which can\ntake several minutes (see ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"Internals")," for more details).\nSubsequent runs will start much faster as cached environments will be available."),(0,i.kt)("p",null,"This short clip shows a run in action, showing also a resulting card:"),(0,i.kt)(o.Z,{playing:!0,controls:!0,muted:!0,loop:!0,url:"/assets/fractalflow.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}))}m.isMDXComponent=!0}}]);