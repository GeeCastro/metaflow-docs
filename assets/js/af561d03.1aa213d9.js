"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2299],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),p=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},l=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(r),d=n,f=l["".concat(c,".").concat(d)]||l[d]||m[d]||o;return r?a.createElement(f,s(s({ref:t},u),{},{components:r})):a.createElement(f,s({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=l;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}l.displayName="MDXCreateElement"},6593:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return v}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],i={},c="@batch",p={unversionedId:"api/step-decorators/batch",id:"api/step-decorators/batch",title:"@batch",description:"The @batch decorator sends a step for execution on the AWS Batch compute layer. For more information, see Effortless Scaling with AWS Batch.",source:"@site/docs/api/step-decorators/batch.md",sourceDirName:"api/step-decorators",slug:"/api/step-decorators/batch",permalink:"/api/step-decorators/batch",editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/step-decorators/batch.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"@environment",permalink:"/api/step-decorators/environment"},next:{title:"@card",permalink:"/api/step-decorators/card"}},u=[],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},l=m("DocSection"),d=m("SigArgSection"),f=m("SigArg"),h=m("Description"),y=m("ParamSection"),b=m("Parameter"),g={toc:u};function v(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"batch"},"@batch"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@batch")," decorator sends a step for execution on the ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/batch/"},"AWS Batch")," compute layer. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/scaling-out-and-up/effortless-scaling-with-aws-batch"},"Effortless Scaling with AWS Batch"),"."),(0,o.kt)(l,{type:"decorator",name:"batch",module:"metaflow",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/aws/batch/batch_decorator.py#L30",mdxType:"DocSection"},(0,o.kt)(d,{mdxType:"SigArgSection"},(0,o.kt)(f,{name:"...",mdxType:"SigArg"})),(0,o.kt)(h,{summary:"Specifies that this step should execute on [AWS Batch](https://aws.amazon.com/batch/).",mdxType:"Description"}),(0,o.kt)(y,{name:"Parameters",mdxType:"ParamSection"},(0,o.kt)(b,{name:"cpu",type:"int",desc:"Number of CPUs required for this step. Defaults to 1. If `@resources` is\\nalso present, the maximum value from all decorators is used.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"gpu",type:"int",desc:"Number of GPUs required for this step. Defaults to 0. If `@resources` is\\nalso present, the maximum value from all decorators is used.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"memory",type:"int",desc:"Memory size (in MB) required for this step. Defaults to 4096 (4GB). If\\n`@resources` is also present, the maximum value from all decorators is\\nused.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"image",type:"string",desc:"Docker image to use when launching on AWS Batch. If not specified, a\\ndefault Docker image mapping to the current version of Python is used.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"queue",type:"string",desc:"AWS Batch Job Queue to submit the job to. Defaults to the one\\nspecified by the configuration variable `METAFLOW_BATCH_JOB_QUEUE`.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"iam_role",type:"string",desc:"AWS IAM role that AWS Batch container uses to access AWS cloud resources.\\nDefaults to the one specified by the configuration variable `METAFLOW_ECS_S3_ACCESS_IAM_ROLE`.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"execution_role",type:"string",desc:"AWS IAM role that AWS Batch can use [to trigger AWS Fargate tasks]\\n(https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html).\\nDefaults to the one determined by the configuration variable\\n`METAFLOW_ECS_FARGATE_EXECUTION_ROLE`.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"shared_memory",type:"int",desc:"The value for the size (in MiB) of the /dev/shm volume for this step.\\nThis parameter maps to the `--shm-size` option in Docker.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"max_swap",type:"int",desc:"The total amount of swap memory (in MiB) a container can use for this\\nstep. This parameter is translated to the `--memory-swap` option in\\nDocker where the value is the sum of the container memory plus the\\n`max_swap` value.",mdxType:"Parameter"}),(0,o.kt)(b,{name:"swappiness",type:"int",desc:"This allows you to tune memory swappiness behavior for this step.\\nA swappiness value of 0 causes swapping not to happen unless absolutely\\nnecessary. A swappiness value of 100 causes pages to be swapped very\\naggressively. Accepted values are whole numbers between 0 and 100.",mdxType:"Parameter"}))))}v.isMDXComponent=!0}}]);