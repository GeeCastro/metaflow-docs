"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[904],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),l=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),f=n,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return r?o.createElement(m,i(i({ref:t},p),{},{components:r})):o.createElement(m,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},914:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return g}});var o=r(7462),n=r(3366),a=(r(7294),r(3905)),i=["components"],c={},s="@conda_base",l={unversionedId:"api/flow-decorators/conda_base",id:"api/flow-decorators/conda_base",title:"@conda_base",description:"The @conda_base decorator specifies what libraries should be made available for all steps of a flow.",source:"@site/docs/api/flow-decorators/conda_base.md",sourceDirName:"api/flow-decorators",slug:"/api/flow-decorators/conda_base",permalink:"/api/flow-decorators/conda_base",editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/flow-decorators/conda_base.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Flow Decorators",permalink:"/api/flow-decorators/"},next:{title:"@project",permalink:"/api/flow-decorators/project"}},p=[],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},u=d("DocSection"),f=d("SigArgSection"),m=d("SigArg"),b=d("Description"),y=d("ParamSection"),h=d("Parameter"),w={toc:p};function g(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},w,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"conda_base"},"@conda_base"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@conda_base")," decorator specifies what libraries should be made available for all steps of a flow."),(0,a.kt)("p",null,"The libraries are installed from ",(0,a.kt)("a",{parentName:"p",href:"https://anaconda.org/"},"Conda repositories"),". For more information, see ",(0,a.kt)("a",{parentName:"p",href:"/metaflow/dependencies"},"Managing External Libraries"),"."),(0,a.kt)(u,{type:"decorator",name:"conda_base",module:"metaflow",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/conda/conda_flow_decorator.py#L5",mdxType:"DocSection"},(0,a.kt)(f,{mdxType:"SigArgSection"},(0,a.kt)(m,{name:"...",mdxType:"SigArg"})),(0,a.kt)(b,{summary:"Specifies the Conda environment for all steps of the flow.",extended_summary:"Use `@conda_base` to set common libraries required by all\\nsteps and use `@conda` to specify step-specific additions.",mdxType:"Description"}),(0,a.kt)(y,{name:"Parameters",mdxType:"ParamSection"},(0,a.kt)(h,{name:"libraries",type:"Dict",desc:"Libraries to use for this flow. The key is the name of the package\\nand the value is the version to use (Default: {}).",mdxType:"Parameter"}),(0,a.kt)(h,{name:"python",type:"string",desc:"Version of Python to use, e.g. '3.7.4'\\n(Default: None, i.e. the current Python version).",mdxType:"Parameter"}),(0,a.kt)(h,{name:"disabled",type:"bool",desc:"If set to True, disables Conda (Default: False).",mdxType:"Parameter"}))))}g.isMDXComponent=!0}}]);